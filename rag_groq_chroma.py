# -*- coding: utf-8 -*-
"""Copy of LLAMA 3.1. 70B - RAG - Doc QA - ChromaDB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rWE0yUvou3A5qoQgfASJ4f0aq63HWiD_
"""

#pip install chromadb==0.5.5 langchain-chroma==0.1.2 langchain==0.2.11 langchain-community==0.2.10 langchain-text-splitters==0.2.2 langchain-groq==0.1.6 transformers==4.43.2 sentence-transformers==3.0.1 unstructured==0.15.0 unstructured[pdf]==0.15.0

import os

from langchain.document_loaders import UnstructuredFileLoader
from langchain_text_splitters import CharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_chroma import Chroma
from langchain_groq import ChatGroq
from langchain.chains import RetrievalQA

os.environ["GROQ_API_KEY"] = "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"

from google.colab import files

# Upload the file
uploaded = files.upload()

# List the uploaded files
for filename in uploaded.keys():
    print(f'User uploaded file "{filename}" with length {len(uploaded[filename])} bytes')

# laoding the document
loader = UnstructuredFileLoader("/content/TheAppropriationBill_2023.pdf")
documents = loader.load()

# splitting into text chunks
text_splitter = CharacterTextSplitter(
    chunk_size=2000,
    chunk_overlap=400
)

texts = text_splitter.split_documents(documents)

type(texts)

len(texts)

#texts[:3]

embeddings = HuggingFaceEmbeddings()

persist_directory = "doc_db2"

vectordb = Chroma.from_documents(
    documents=texts,
    embedding=embeddings,
    persist_directory=persist_directory
)

# retriever
retriever = vectordb.as_retriever()

# llm from groq
llm = ChatGroq(
    model="llama-3.1-70b-versatile",
    temperature=0
)

# create a qa chain
qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=retriever,
    return_source_documents=True
)

import shutil

folder_name = "doc_db2"  # Replace with your folder name
zip_file_name = "approprationbill.zip"  # Name of the zip file to create

shutil.make_archive(folder_name, 'zip', folder_name)

from google.colab import files

files.download('/content/doc_db2.zip')

# invoke the qa chain and get a response for user query
query = "What is the purpose of this paper?"
response = qa_chain.invoke({"query": query})

print(response)

print(response["result"])

print(response["source_documents"][0].metadata["source"])



# invoke the qa chain and get a response for user query
query = "how has money been allocated according to this document?"
response = qa_chain.invoke({"query": query})
print(response["result"])
print("*"*30)
print("Source Document:", response["source_documents"][0].metadata["source"])

# invoke the qa chain and get a response for user query
query = "how many much money has been allocated to health?"
response = qa_chain.invoke({"query": query})
print(response["result"])
print("*"*30)
print("Source Document:", response["source_documents"][0].metadata["source"])